module network {
  initnode void registerMinTick(void);
  initnode void registerMaxIdx(void);
  initnode void registerNetDist(void);
  initnode void registerNetGroup(void);
  initnode void registerNetEvent(void);

  message mDist {
    idx_t vtxdist[];
    idx_t edgdist[];
    idx_t statedist[];
    idx_t stickdist[];
    idx_t eventdist[];
  };
  
  message mModel {
    idx_t modtype[];
    idx_t graphtype[];
    idx_t xmodname[];
    char modname[];
    idx_t nstate[];
    idx_t nstick[];
    idx_t nparam[];
    idx_t xstatename[];
    idx_t xstickname[];
    char statename[];
    char stickname[];
    idx_t xstatetype[];
    idx_t xsticktype[];
    idx_t statetype[];
    idx_t sticktype[];
    real_t stateparam[];
    real_t stickparam[];
    idx_t xparamname[];
    char paramname[];
    idx_t xparam[];
    real_t param[];
    idx_t xport[];
    char port[];
    idx_t xdatafiles[];
    char datafiles[];
    idx_t datatypes[];
    bool grpactive[];
    bool grpmother[];
    bool grpanchor[];
    idx_t nmodel;
    idx_t nstateparam;
    idx_t nstickparam;
    idx_t ndatafiles;
    bool plastic;
    bool episodic;
  };
  
  message mGraph {
    idx_t vtxmodidx[];
    idx_t vtxorder[];
    idx_t vtxshape[];
    idx_t xvtxparam[];
    real_t vtxparam[];
    real_t vtxcoord[];
    idx_t edgsource[];
    idx_t xedgtarget[];
    idx_t edgtarget[];
    idx_t edgmodidx[];
    real_t edgcutoff[];
    idx_t edgdistype[];
    idx_t medgdistparam[];
    real_t edgdistparam[];
    idx_t xedgconntype[];
    idx_t edgconntype[];
    idx_t medgprobparam[];
    real_t edgprobparam[];
    idx_t medgmaskparam[];
    idx_t edgmaskparam[];
    idx_t nvtx;
    idx_t nvtxparam;
    idx_t nedg;
    idx_t nedgtarget;
    idx_t nedgdistparam;
    idx_t nedgconntype;
    idx_t nedgprobparam;
    idx_t nedgmaskparam;
  };

  message mConn {
    idx_t vtxmodidx[];
    idx_t vtxordidx[];
    real_t xyz[];
    idx_t vtxidx[];
    idx_t xadj[];
    idx_t adjcy[];
    int datidx;
    idx_t nvtx;
  };

  message mReorder {
    idx_t vtxidxold[];
    idx_t vtxidxnew[];
    idx_t datidx;
    idx_t nvtx;
  };

  message mPart {
    idx_t vtxdist[];
    idx_t vtxmodidx[];
    real_t xyz[];
    idx_t xadj[];
    idx_t adjcy[];
    idx_t edgmodidx[];
    real_t state[];
    tick_t stick[];
    idx_t xevent[];
    tick_t diffuse[];
    idx_t type[];
    idx_t source[];
    idx_t index[];
    real_t data[];
    idx_t nvtx;
    idx_t nedg;
    idx_t nstate;
    idx_t nstick;
    idx_t nevent;
    int prtidx;
  };
  
  message mRecord {
    tick_t diffuse[];
    idx_t type[];
    idx_t source[];
    idx_t index[];
    real_t data[];
    tick_t drift[];
    idx_t xdata[];
    idx_t xdiffuse[];
    idx_t xindex[];
    int prtidx;
    idx_t iter;
    idx_t nevtlog;
    idx_t nrecord;
  };
  
  message mGo {
    idx_t iter;
  };

  message mEvent {
    tick_t diffuse[];
    idx_t type[];
    idx_t source[];
    idx_t index[];
    real_t data[];
    idx_t iter;
    idx_t nevent;
  };

  message mRPC {
    real_t rpcdata[];
    idx_t nrpcdata;
    idx_t command;
  };
  
  array [1D] Netdata {
    entry Netdata(mModel *msg);
    
    entry void Build(mGraph *msg);
    entry void SaveBuild();
    entry void ConnectVtx(mConn *msg);
    entry void RequestConnVtx(idx_t reqidx);
    entry void ConnectHandover();
    entry void ConnectEdg(mConn *msg);
    entry void RequestConnEdg(idx_t reqidx);

    entry void LoadPart(mDist *msg);
    entry void ScatterPart();
    entry void GatherPart(mPart *msg);
    entry void Reorder(mReorder *msg);
    
    entry void LoadData(mDist *msg);
    entry void LoadNetwork(int prtidx, const CkCallback &cbpart);
    
    entry void SaveNetwork(mPart *msg);
    entry void SaveCloseNetwork(mPart *msg);
    entry void CloseNetwork();
    
    entry void SaveRecord(mRecord *msg);
    entry void SaveFinalRecord(mRecord *msg);
    entry void SaveEstimate(CkReductionMsg *msg);
    entry void SaveFinalEstimate(CkReductionMsg *msg);
  };

  array [1D] Network {
    entry Network(mModel *msg);
    entry void LoadNetwork(mPart *msg);
    
    entry void InitSim(CProxy_Netdata cpdata);
    entry void CycleSim();
    
    entry void InitSimGPU(CProxy_Netdata cpdata);
    entry void CycleSimGPU();
    
    entry void InitEst(CProxy_Netdata cpdata);
    entry void CycleEst();
    
    entry void GoAhead(mGo *msg);
    entry void CommEvent(mEvent *msg);
    entry void CommStamp(mEvent *msg);
    entry void CommRPC(mRPC *msg);
   
    entry void SaveNetwork();
    entry void SaveCloseNetwork();
    entry void CloseNetwork();
    
    entry void SaveRecord();
    entry void SaveFinalRecord();
    entry void SaveEstimate();
    entry void SaveFinalEstimate();
    
    entry void InitGroup(CProxy_Netdata cpdata);
    entry void FindGroup();
    entry void ComputeGroup(idx_t nseeds, int grpart);
    entry void ComputeGroup();
    entry void SeedGroup(mEvent *msg);
    entry void CycleGroup();
    entry void EvalGroup(CkReductionMsg *msg);
  };
};
