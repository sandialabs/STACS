mainmodule genet {
  readonly CProxy_Main mainProxy;
  readonly unsigned int randseed;
  readonly std::string netwkdir;
  readonly idx_t netparts;
  readonly int netfiles;
  readonly std::string filebase;
  readonly std::string filesave;
  
  initnode void registerNetDist(void);

  message mModel {
    idx_t type[];
    idx_t xmodname[];
    char modname[];
    idx_t xstatetype[];
    idx_t xsticktype[];
    idx_t statetype[];
    idx_t sticktype[];
    real_t stateparam[];
    real_t stickparam[];
    idx_t xdatafiles[];
    char datafiles[];
    idx_t nmodel;
    idx_t nstateparam;
    idx_t nstickparam;
    idx_t ndatafiles;
  };
  
  message mGraph {
    idx_t vtxmodidx[];
    idx_t vtxorder[];
    idx_t vtxshape[];
    idx_t xvtxparam[];
    real_t vtxparam[];
    real_t vtxcoord[];
    idx_t edgsource[];
    idx_t xedgtarget[];
    idx_t edgtarget[];
    idx_t edgmodidx[];
    real_t edgcutoff[];
    idx_t xedgconntype[];
    idx_t edgconntype[];
    idx_t medgprobparam[];
    real_t edgprobparam[];
    idx_t medgmaskparam[];
    idx_t edgmaskparam[];
    idx_t nvtx;
    idx_t nvtxparam;
    idx_t nedg;
    idx_t nedgtarget;
    idx_t nedgconntype;
    idx_t nedgprobparam;
    idx_t nedgmaskparam;
  };

  message mConn {
    idx_t vtxmodidx[];
    idx_t vtxordidx[];
    real_t xyz[];
    idx_t xadj[];
    idx_t adjcy[];
    idx_t edgmodidx[];
    int datidx;
    idx_t nvtx;
  };
  
  message mMetis {
    idx_t vtxdist[];
    idx_t edgdist[];
  };

  message mPart {
    idx_t vtxidx[];
    idx_t vtxmodidx[];
    real_t xyz[];
    idx_t xadj[];
    idx_t adjcy[];
    idx_t edgmodidx[];
    real_t state[];
    tick_t stick[];
    idx_t xevent[];
    tick_t diffuse[];
    idx_t type[];
    idx_t source[];
    idx_t index[];
    real_t data[];
    int datidx;
    idx_t prtidx;
    idx_t nvtx;
    idx_t nstate;
    idx_t nstick;
    idx_t nevent;
  };

  message mOrder {
    idx_t vtxidxold[];
    idx_t vtxidxnew[];
    int datidx;
    idx_t nvtx;
  };

  mainchare Main {
    entry Main(CkArgMsg *msg);

    entry [reductiontarget] void Control();
    entry [reductiontarget] void ReturnControl();
    entry void Halt(CkReductionMsg *msg);
  };

  array [1D] GeNet {
    entry GeNet(mModel *msg);

    entry void Build(mGraph *msg);
    entry void Read(mMetis *msg);
    entry void Connect(mConn *msg);
    entry void ConnRequest(idx_t reqidx);
    entry void SetPartition();
    entry void ScatterPart();
    entry void GatherPart(mPart *msg);
    entry void Order(mOrder *msg);
    entry void Write(const CkCallback &cb);
  };
};
